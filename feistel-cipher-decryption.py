#!/usr/bin/env python3

# Description: Feistel cipher decryption script

# Alphabet where:

# 0  1  2  3  4  5  6  7  8  9  10 11 12
# A  B  C  D  E  F  G  H  I  J  K  L  M

# 13 14 15 16 17 18 29 20 21 22 23 24 25
# N  O  P  Q  R  S  T  u  V  W  X  Y  Z


abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
abc_len = len(abc)


def process_iteration(pair, key, function_logic):
    m = pair[1]
    l = pair[0] ^ function_logic(m, key)
    return [m, l]


def decrypt_with_keys(cipher, keys, function_logic):
    result = []
    temp = cipher[:]
    for key in reversed(keys):
        for i in range(len(temp)):
            temp[i] = process_iteration(temp[i], key, function_logic)
        result.append(temp[:])
    return ''.join([chr(item[1]) + chr(item[0]) for item in result[-1]])


def brute_force_key(cipher, key, function_logic):
    for i in range(256):
        key_copy = key.copy()
        key_copy[key.index('?')] = i
        result = decrypt_with_keys(cipher, key_copy, function_logic)
        print(f"Key: {key_copy}\n\n{result}\n")
    return result


def feistel_decrypt(cipher, key, function_logic):
    result = ""
    if len(key) == 3:
        result = decrypt_with_keys(cipher, key, function_logic)
        print(result + "\n")
    elif len(key) == 2:
        if key == ['?', '?']:
            for i in range(256):
                for j in range(256):
                    result = decrypt_with_keys(cipher, [i, j], function_logic)
                    print(f"Key: {i}, {j}\n\n{result}\n")
        elif '?' in key:
            result = brute_force_key(cipher, key, function_logic)
        else:
            result = decrypt_with_keys(cipher, key, function_logic)
            print(result + "\n")
    else:
        print("Error: Invalid number of keys")
    return result


def main():
    
    # the function_logic is the same as the one used in the encryption script
    # function_logic = lambda m, key: (m & key) | ((key % 16) ^ m)
    # function_logic = lambda m, key: (m | key ) ^ ((m // 16) & key)
    function_logic = lambda m, key: (m | key) ^ ((key // 16) & m)
    
    # the cipher pairs
    # cipher = [[74, 81], [73, 86], [89, 75], [77, 74], [86, 94], [66, 76], [82, 93], [66, 76], [93, 84], [85, 91], [74, 74], [69, 92], [77, 87], [94, 88], [86, 76], [73, 78], [71, 90], [72, 67], [92, 91], [77, 74], [87, 93], [82, 76], [82, 77], [65, 88], [74, 75], [74, 66], [65, 88], [79, 83], [72, 74], [89, 73], [84, 89], [74, 82], [82, 73], [74, 65], [83, 92], [77, 78], [65, 88], [76, 84], [75, 78], [66, 77], [79, 82], [66, 88], [93, 75], [92, 75], [84, 92], [64, 94], [69, 88], [81, 70], [70, 65], [75, 80], [73, 87], [80, 79], [66, 93], [65, 70], [68, 73], [64, 64], [76, 70], [89, 73], [77, 74], [86, 79], [64, 78], [73, 86], [66, 67], [74, 75], [84, 79], [66, 93], [65, 70], [68, 72], [75, 78], [93, 84], [85, 91], [70, 64], [91, 78], [65, 94], [73, 73], [86, 77], [65, 75], [82, 76], [78, 65], [81, 75], [77, 74], [70, 65], [65, 88], [89, 73], [70, 64], [67, 66], [81, 77], [66, 93], [65, 70], [78, 70], [88, 70], [86, 79], [92, 95], [75, 80], [82, 79], [84, 79], [85, 70], [76, 67], [73, 87], [88, 72], [72, 69], [86, 79], [92, 95], [75, 80], [82, 79], [84, 79], [85, 70], [77, 78], [68, 92], [67, 64], [75, 74], [78, 65], [67, 76], [64, 64], [77, 83], [88, 71], [69, 70], [84, 89], [90, 79], [68, 86], [83, 88], [86, 76], [89, 73], [74, 81], [73, 86], [89, 75], [77, 74], [73, 87], [68, 72], [89, 73], [82, 93], [92, 91], [77, 78], [73, 86], [65, 91], [82, 73], [72, 67], [88, 77], [64, 75], [78, 65], [92, 91], [69, 70], [75, 74], [66, 64], [69, 88], [73, 87], [78, 65], [68, 75], [71, 64], [68, 76], [85, 95], [79, 82], [70, 76], [77, 74], [84, 89], [72, 72], [92, 75], [77, 74], [69, 88], [75, 78], [93, 84], [85, 91], [70, 64], [67, 66], [71, 94], [93, 84], [85, 91], [78, 65], [76, 67], [94, 92], [94, 76], [73, 87], [82, 76], [76, 68], [74, 65], [68, 72], [74, 75], [73, 68], [73, 73], [70, 65], [82, 74], [64, 78], [70, 67], [82, 76], [68, 88], [76, 84], [75, 78], [93, 84], [85, 91], [90, 78], [94, 92], [65, 90], [90, 76]]
    # cipher = [[53, 47], [56, 62], [42, 63], [48, 62], [44, 53], [57, 54], [40, 52], [58, 52], [42, 57], [41, 35], [50, 47], [46, 61], [40, 59], [33, 50], [57, 51], [59, 40], [57, 62], [44, 52], [42, 59], [52, 58], [57, 55], [57, 55], [62, 63], [45, 35], [61, 51], [57, 63], [56, 45], [51, 55], [52, 43], [50, 62], [50, 47], [63, 61], [32, 40], [45, 42], [54, 58], [52, 58], [42, 35], [43, 51], [53, 47], [62, 62], [60, 41], [51, 58], [54, 50], [51, 60], [63, 61], [56, 52], [47, 63], [54, 58], [63, 63], [40, 51], [61, 51], [42, 40], [53, 47], [56, 62], [43, 51], [55, 56], [56, 45], [32, 40], [54, 58], [61, 63], [41, 42], [53, 55], [57, 56], [52, 47], [50, 52], [61, 62], [53, 41], [54, 34], [51, 53], [58, 61], [60, 41], [44, 43], [50, 62], [33, 57], [54, 58], [52, 58], [42, 35], [43, 51], [50, 47], [53, 47], [46, 63], [61, 62], [53, 63], [59, 53], [58, 52], [50, 62], [42, 57], [41, 35], [56, 47], [63, 63], [49, 52], [41, 55], [53, 53], [57, 56], [52, 47], [50, 52], [49, 40], [43, 59], [50, 52], [63, 52], [57, 56], [48, 40], [50, 52], [52, 58], [56, 47], [60, 41], [40, 62], [61, 51], [55, 56], [47, 47], [60, 40], [58, 52], [49, 51], [45, 41], [46, 53], [45, 35], [45, 50], [45, 41], [61, 51], [48, 33], [49, 54], [46, 63], [61, 54], [50, 53], [56, 47], [57, 55], [46, 61], [53, 58], [47, 46], [63, 50], [57, 60], [60, 41], [40, 62], [61, 51], [51, 46], [44, 51], [56, 62], [45, 41], [44, 59], [47, 63], [50, 62], [47, 46], [48, 34], [40, 52], [43, 53], [46, 53], [56, 55], [60, 44], [48, 41], [54, 58], [61, 63], [48, 55], [61, 50], [46, 62], [61, 62], [53, 63], [59, 53], [58, 52], [61, 53], [48, 33], [57, 60], [52, 41], [54, 58], [42, 35], [49, 56], [49, 43], [46, 63], [42, 41], [55, 51], [45, 40], [50, 62], [56, 62], [50, 44], [53, 41], [43, 62], [42, 59], [49, 50], [54, 50], [54, 40], [57, 54], [42, 63], [52, 58], [60, 46], [52, 47], [50, 52], [59, 40], [56, 34], [52, 40], [62, 46], [57, 51], [45, 41], [50, 44], [60, 34], [42, 59], [93, 46]]
    cipher = [[243, 138], [255, 153], [232, 139], [254, 130], [243, 148], [239, 154], [251, 129], [242, 145], [254, 138], [251, 140], [243, 130], [233, 150], [254, 130], [242, 134], [244, 135], [238, 146], [255, 138], [243, 136], [235, 144], [250, 128], [244, 146], [232, 151], [251, 129], [246, 145], [243, 136], [251, 136], [243, 132], [246, 145], [254, 128], [255, 153], [251, 153], [253, 155], [251, 133], [255, 145], [248, 135], [239, 158], [232, 136], [250, 140], [241, 138], [250, 144], [238, 129], [249, 155], [236, 136], [250, 132], [236, 136], [243, 134], [248, 142], [245, 147], [232, 149], [235, 144], [243, 138], [236, 156], [255, 158], [246, 140], [236, 136], [242, 138], [237, 149], [249, 132], [244, 130], [246, 145], [239, 158], [240, 144], [233, 157], [247, 137], [245, 130], [251, 129], [238, 139], [252, 132], [250, 140], [251, 141], [234, 157], [236, 148], [241, 142], [249, 159], [243, 128], [242, 142], [233, 138], [243, 128], [246, 141], [238, 146], [232, 138], [252, 136], [238, 158], [252, 152], [249, 155], [235, 152], [251, 140], [239, 152], [255, 158], [247, 141], [236, 152], [247, 149], [248, 153], [237, 148], [240, 144], [250, 132], [242, 142], [232, 151], [239, 147], [251, 129], [255, 133], [251, 157], [233, 137], [241, 145], [251, 157], [243, 130], [238, 158], [252, 154], [242, 154], [241, 143], [235, 156], [243, 139], [239, 159], [249, 132], [237, 152], [239, 128], [243, 151], [237, 156], [239, 152], [231, 153], [245, 150], [254, 130], [238, 145], [241, 145], [249, 159], [235, 157], [248, 154], [233, 159], [255, 133], [252, 154], [245, 143], [232, 151], [241, 145], [235, 157], [233, 154], [242, 138], [248, 133], [237, 148], [241, 141], [245, 151], [248, 138], [236, 153], [235, 144], [238, 146], [255, 131], [229, 131], [234, 137], [243, 130], [243, 128], [238, 130], [239, 143], [235, 152], [251, 157], [239, 148], [247, 149], [249, 133], [243, 151], [236, 153], [254, 140], [248, 128], [239, 158], [254, 132], [253, 133], [249, 134], [238, 158], [243, 130], [255, 143], [239, 144], [251, 129], [237, 137], [235, 157], [245, 147], [249, 133], [240, 148], [240, 147], [235, 159], [239, 154], [254, 128], [248, 135], [251, 138], [242, 128], [232, 150], [236, 136], [243, 151], [229, 131], [246, 149], [250, 142], [241, 142], [254, 143], [250, 158], [243, 138], [245, 150], [254, 130], [255, 131], [229, 131], [234, 137], [243, 130], [243, 128], [238, 130], [238, 146], [252, 158], [252, 154], [238, 139], [240, 142], [243, 138], [243, 134], [251, 157], [251, 133], [250, 132], [232, 151], [237, 152], [239, 128], [243, 151], [237, 156], [239, 152], [231, 153], [243, 130], [247, 133], [239, 143], [246, 140], [232, 138], [248, 154], [248, 158], [249, 155], [243, 138], [241, 149], [234, 151], [251, 140], [243, 138], [246, 149], [250, 140], [251, 145], [232, 154], [247, 149], [241, 140], [249, 132], [254, 132], [255, 157], [255, 129], [245, 147], [243, 130], [247, 133], [232, 151], [251, 129], [238, 159], [230, 148], [233, 159], [252, 152], [241, 140], [245, 151], [233, 154], [242, 138], [253, 135], [248, 135], [242, 136], [238, 139], [238, 146], [241, 140], [250, 132], [232, 151], [241, 129], [246, 149], [243, 138], [246, 149], [250, 140], [239, 154], [231, 157], [246, 149], [248, 138], [232, 151], [239, 142], [159, 176]] 
    
    # the key defined as a list of, number of keys is equal to the number of rounds
    # key = [74, 125, 64] # key for 3 rounds
    # key =['?', 123] # key for 2 rounds
    key = ['?', '?'] # key for 2 rounds
    
    print("\nDecrypted Text:\n")
    feistel_decrypt(cipher, key, function_logic)

if __name__ == "__main__":
    main()